> START OF (App.js):

  // App.js:
  import React, { useState } from 'react';
  import { NavigationContainer } from '@react-navigation/native';
  import { createStackNavigator } from '@react-navigation/stack';
  import LoginScreen from './src/screens/LoginScreen';
  import SignUpScreen from './src/screens/SignUpScreen';
  import BottomNavigation from './src/components/BottomNavigation';
  import Profile from './src/screens/Profile';
  import HomeScreen from './src/screens/HomeScreen';
  import Setting_lang from './src/screens/SettingsLanguage';
  import Setting_connected from './src/screens/SettingsConnected';
  
  const Stack = createStackNavigator();
  
  function App() {
    const [isLoggedIn, setIsLoggedIn] = useState(false);
  
    const handleLogin = () => {
      setIsLoggedIn(true);
    };
  
  
    if (isLoggedIn) {
      return <BottomNavigation />;
    } else {
      return (
        <NavigationContainer>
          <Stack.Navigator initialRouteName="Login">
            <Stack.Screen name="Login" options={{ headerShown: false }}>
              {(props) => <LoginScreen {...props} onLogin={handleLogin} />}
            </Stack.Screen>
            <Stack.Screen name="SignUp" component={SignUpScreen} options={{ headerShown: false }} />
          </Stack.Navigator>
        </NavigationContainer>
      );
    }
  }
  
  export default App;
 < END OF (App.js):

> START OF (SignUpScreen.js):

  // SignUpScreen.js:
  import React, { useState } from 'react';
  import { View, Text, TextInput, TouchableOpacity, StyleSheet } from 'react-native';
  import { useNavigation } from '@react-navigation/native';
  
  import axios from 'axios';
  
  const SignUpScreen = () => {
      const [name, setName] = useState('');
      const [email, setEmail] = useState('');
      const [password, setPassword] = useState('');
      const [confirmPassword, setConfirmPassword] = useState('');
      const navigation = useNavigation();
  
      const handleSignUp = () => {
          axios.post('http://75.102.242.221:5000/register', {
              name,
              email,
              password
          })
              .then(function (response) {
                  console.log(response.data.token); // access the token
              })
              .catch(function (error) {
                  console.log(error);
              });
      };
  
      return (
          <View style={styles.container}>
              <Text style={styles.title}>Sign Up</Text>
  
              <TextInput
                  style={styles.input}
                  placeholder="Name"
                  value={name}
                  onChangeText={setName}
              />
  
              <TextInput
                  style={styles.input}
                  placeholder="Email"
                  value={email}
                  onChangeText={setEmail}
                  keyboardType="email-address"
                  autoCapitalize="none"
              />
  
              <TextInput
                  style={styles.input}
                  placeholder="Password"
                  value={password}
                  onChangeText={setPassword}
                  secureTextEntry
              />
  
              <TextInput
                  style={styles.input}
                  placeholder="Confirm Password"
                  value={confirmPassword}
                  onChangeText={setConfirmPassword}
                  secureTextEntry
              />
  
              <TouchableOpacity style={styles.button} onPress={handleSignUp}>
                  <Text style={styles.buttonText}>Sign Up</Text>
              </TouchableOpacity>
  
              <TouchableOpacity onPress={() => navigation.navigate('Login')}>
                  <Text style={styles.linkText}>Already have an account? Login</Text>
              </TouchableOpacity>
          </View>
      );
  };
  
  const styles = StyleSheet.create({
      container: {
          flex: 1,
          alignItems: 'center',
          justifyContent: 'center',
          paddingHorizontal: 20,
          backgroundColor: '#fff'
      },
      title: {
          fontSize: 24,
          fontWeight: 'bold',
          marginBottom: 20
      },
      input: {
          width: '100%',
          height: 50,
          borderColor: '#ccc',
          borderWidth: 1,
          borderRadius: 5,
          paddingHorizontal: 10,
          marginBottom: 20
      },
      button: {
          width: '100%',
          height: 50,
          backgroundColor: '#0066cc',
          borderRadius: 5,
          alignItems: 'center',
          justifyContent: 'center'
      },
      buttonText: {
          color: '#fff',
          fontSize: 18,
          fontWeight: 'bold'
      },
      linkText: {
          marginTop: 20,
          color: '#0066cc',
          fontSize: 18,
          textDecorationLine: 'underline'
      }
  });
  
  export default SignUpScreen;

 < END OF (SignUpScreen.js):

> START OF (LoginScreen.js):

  import React, { useState } from 'react';
  import { View, TextInput, Button, Alert, TouchableOpacity, Text, Image, StyleSheet } from 'react-native';
  import axios from 'axios';
  import { useNavigation } from '@react-navigation/native';
  import UniteLogo from '../images/Unite_Logo.png';
  
  const LoginScreen = ({ onLogin }) => {
      const [email, setEmail] = useState('');
      const [password, setPassword] = useState('');
      const navigation = useNavigation();
  
      const handleLogin = () => {
          axios.post('http://75.102.242.221:5000/login', {
              email,
              password
          })
              .then(response => {
                  console.log(response.data);
                  onLogin(); // If authentication succeeds, call the onLogin function to set the isLoggedIn state to true
              })
              .catch(error => {
                  // Show an error message
                  Alert.alert('Error', 'Could not log in. Please check your credentials.');
                  console.log(error);
              });
      };
  
      return (
          <View style={styles.container}>
              <Image source={UniteLogo} style={styles.logo} />
  
              <Text style={styles.title}>Login</Text>
  
              <TextInput
                  style={styles.input}
                  placeholder="Email"
                  value={email}
                  onChangeText={setEmail}
                  keyboardType="email-address"
                  autoCapitalize="none"
              />
  
              <TextInput
                  style={styles.input}
                  placeholder="Password"
                  value={password}
                  onChangeText={setPassword}
                  secureTextEntry
              />
  
              <TouchableOpacity style={styles.button} onPress={handleLogin}>
                  <Text style={styles.buttonText}>Login</Text>
              </TouchableOpacity>
  
              <TouchableOpacity onPress={() => navigation.navigate('SignUp')}>
                  <Text style={styles.signupText}>Don't have an account? Sign Up</Text>
              </TouchableOpacity>
          </View>
      );
  };
  
  const styles = StyleSheet.create({
      container: {
          flex: 1,
          alignItems: 'center',
          justifyContent: 'center',
          paddingHorizontal: 20,
          backgroundColor: '#fff'
      },
      logo: {
          width: 150,
          height: 150,
          marginBottom: 30
      },
      title: {
          fontSize: 24,
          fontWeight: 'bold',
          marginBottom: 20
      },
      input: {
          width: '100%',
          height: 50,
          borderColor: '#ccc',
          borderWidth: 1,
          borderRadius: 5,
          paddingHorizontal: 10,
          marginBottom: 20
      },
      button: {
          width: '100%',
          height: 50,
          backgroundColor: '#0066cc',
          borderRadius: 5,
          alignItems: 'center',
          justifyContent: 'center'
      },
      buttonText: {
          color: '#fff',
          fontSize: 18,
          fontWeight: 'bold'
      },
      signupText: {
          marginTop: 20,
          color: '#0066cc',
          fontSize: 18,
          textDecorationLine: 'underline'
      }
  });
  
  export default LoginScreen;

 < END OF (LoginScreen.js):

> START OF (User.js):

  const mongoose = require('mongoose');
  
  const UserSchema = new mongoose.Schema({
      name: {
          type: String,
          required: true
      },
      email: {
          type: String,
          required: true,
          unique: true
      },
      password: {
          type: String,
          required: true
      }
  }, {
      timestamps: true
  });
  
  module.exports = mongoose.model('User', UserSchema, 'Users');

 < END OF (User.js):

> START OF (server.js):

  // server.js
  require('dotenv').config();
  
  const express = require('express');
  const mongoose = require('mongoose');
  const bodyParser = require('body-parser');
  const jwt = require('jsonwebtoken');
  const cors = require('cors');
  
  const secret = process.env.JWT_SECRET;
  const dbConnectionString = process.env.DB_CONNECTION_STRING;
  
  const User = require('./models/User');
  
  const app = express();
  
  app.use(cors());
  app.use(bodyParser.json());
  
  mongoose.connect(dbConnectionString, { useNewUrlParser: true, useUnifiedTopology: true })
      .then(() => console.log('MongoDB connected'))
      .catch((err) => console.log(err));
  
  
  // Middleware to authenticate JWT tokens
  function authenticateJWT(req, res, next) {
      const authHeader = req.headers.authorization;
  
      if (authHeader) {
          const token = authHeader.split(' ')[1];
  
          // jwt.verify(token, 'your-secret-key', (err, user) => {
          jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
              if (err) {
                  return res.sendStatus(403);
              }
  
              req.user = user;
              next();
          });
      } else {
          res.sendStatus(401);
      }
  }
  
  app.post('/register', async (req, res) => {
      const { name, email, password } = req.body;
  
      try {
          let user = await User.findOne({ email });
          if (user) {
              return res.status(400).json({ msg: 'User already exists' });
          }
  
          user = new User({
              name,
              email,
              password // In production, ensure this password is hashed before storage
          });
  
          await user.save();
  
          // Use jwt to create a token
          const payload = {
              user: {
                  id: user.id
              }
          };
  
          jwt.sign(
              payload,
              process.env.JWT_SECRET,
              { expiresIn: 360000 },
              (err, token) => {
                  if (err) throw err;
                  res.json({ token });
              }
          );
      } catch (err) {
          console.error(err.message);
          res.status(500).send('Server error');
      }
  });
  
  app.post('/login', async (req, res) => {
      const { email, password } = req.body;
  
      try {
          let user = await User.findOne({ email });
          if (!user) {
              return res.status(400).json({ msg: 'Invalid Credentials' });
          }
  
          // Validate password
          const isMatch = (password === user.password);
          if (!isMatch) {
              return res.status(400).json({ msg: 'Invalid Credentials' });
          }
  
          const payload = {
              user: {
                  id: user.id
              }
          };
  
          jwt.sign(
              payload,
              process.env.JWT_SECRET,
              { expiresIn: 360000 },
              (err, token) => {
                  if (err) throw err;
                  res.json({ token });
              }
          );
      } catch (err) {
          console.error(err.message);
          res.status(500).send('Server error');
      }
  });
  
  app.get('/protected-endpoint', authenticateJWT, (req, res) => {
      res.send('You accessed the protected endpoint!');
  });
  
  app.listen(5000, () => console.log('Server started on port 5000'));

 < END OF (server.js):

> START OF (.env):

  JWT_SECRET=my_secret_key
  DB_CONNECTION_STRING='mongodb+srv://appdev:UniteDB519@unitecluster.zn9o8ko.mongodb.net/UNITE?retryWrites=true&w=majority'
  

 < END OF (.env):

> START OF (.gitignore):

  node_modules/
  .expo/
  dist/
  npm-debug.*
  *.jks
  *.p8
  *.p12
  *.key
  *.mobileprovision
  *.orig.*
  web-build/
  
  # macOS
  .DS_Store
  
  # Windows
  Thumbs.db
  
  #idea
  .idea/
  
  .env
 < END OF (.gitignore):

